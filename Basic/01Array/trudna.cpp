#include <iostream>

using namespace std;

int main() {
    //Решен Судоку пъзел записан в едномерен масив отгоре-надолу и отляво надясно
    // Грешно решение на пъзела
    int array[] = {3, 5, 2, 4, 6, 9, 7, 8, 1, 6, 9, 7, 1, 8, 5, 9, 3, 2, 8, 9, 1, 2, 7, 3, 6, 5, 4, 1, 3, 9, 6, 4, 2, 5,
                   7, 8, 4, 6, 5, 8, 4, 7, 2, 1, 3, 2, 7, 8, 5, 3, 1, 4, 9, 6, 9, 2, 4, 5, 1, 8, 3, 6, 7, 5, 1, 3, 9, 2,
                   6, 8, 4, 7, 7, 8, 6, 3, 5, 4, 1, 2, 9};
    // Коректно решение на пъзела
    //int array[] = {3,5,2,4,6,9,7,8,1,6,4,7,1,8,5,9,3,2,8,9,1,2,7,3,6,5,4,1,3,9,6,4,2,5,7,8,4,6,5,8,9,7,2,1,3,2,7,8,5,3,1,4,9,6,9,2,4,7,1,8,3,6,5,5,1,3,9,2,6,8,4,7,7,8,6,3,5,4,1,2,9};
    int array_size = sizeof(array) / sizeof(array[0]); //проверка за брой на елементите в масива
    if (array_size != 81) { // програмата спира ако числата не са 81
        cout << "The digits in the array must be exactly 81. Exiting the program." << endl;
        return 0;
    }
    cout << "The size of the array is: " << array_size << endl; //принтира размера на масива
    cout << endl;
    /* Създаване на двумерен масив 9х9 с горните елементи от array
    Всеки 9 числа се добавят в нов масив */

    int sudokuTable[9][9];
    for (int i = 0; i < array_size; i++) {
        sudokuTable[i / 9][i % 9] = array[i];
        /* индекса на всеки елемент от array се дели на 9 без остатък и по мод 9.
        Двата резултата се присъждат като индекси на елемента от двумерния масив sudokuTable.
        array[i] се задава като стойност на текущия sudokuTable[][] елемент. */
    }
    // Създаване на тримерен масив за числата във всяка судоку клетка. Използва се sudokuTable за извличане на информацията
    int sudokuCells[3][3][9];
    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            sudokuCells[i / 3][j / 3][((i % 3) * 3) + j % 3] = sudokuTable[i][j];
            // Израз за присъждане на числата от двумерния масив (табличен) в тримерен - по клетки (3х3)
            // 3х3 Клетките (9 на брой) се обозначават с индекси 0,0 ; 0,1 ; 0,2 ; 1,0 ; 1,1 ; 1,2 ; 2,1 и 2,2
            // Третия индекс отговаря на номера на елемента в клетката (от 0 до 8)
            // Изразът по-горе преизчислява индексите на двумерния масив sudokuTable така че да отговарят на тримерния sudokuCells
            // Съответния елемент на sudokuTable се присъжда на елемент от sudokuCells
        }
    }

    // Визуализиране на судоку таблицата
    cout << "Sudoku table:\n\n";
    for (int i = 0; i < 9; i++) {
        if (i % 3 == 0)
            cout << "-------------------------\n";
        cout << "| ";
        for (int j = 0; j < 9; j++) {
            cout << sudokuTable[i][j] << " ";
            if (j % 3 == 2)
                cout << "| ";
        }
        cout << endl;
    }
    cout << "-------------------------\n";
    // Край на Визуализиране на судоку таблицата

    // Проверка на числата дали се повтарят
    bool isValid = 1; // флаг за валидноста на судоку таблицата
    int count_r = 0; // брояч за повторения по редове
    int count_c = 0; // брояч за повторения по колони (и малко по-късно по клетки)

    for (int d = 1; d < 10; d++) //цикъл за сравняване на цифрите от 1 до 9
    {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (sudokuTable[i][j] == d) { // сравняваме цифрите от 1-9 с числата от всеки ред
                    count_r++;
                }
                if (sudokuTable[j][i] == d) { // сравняваме цифрите от 1-9 с числата от всяка колона
                    count_c++;
                }
            }
            // Проверка дали броячите не показват повече от 2 повторения на текущата цифра d в реда
            if (count_r > 1) {
                cout << "The number " << d << " appears " << count_r << " times in row " << i + 1 << endl;
                isValid = 0; //повече от 2? Судоку решението не е валидно
            }
            // Проверка дали броячите не показват повече от 2 повторения на текущата цифра d в колоната
            if (count_c > 1) {
                cout << "The number " << d << " appears " << count_c << " times in column " << i + 1 << endl;
                isValid = 0; // повече от 2? Судоку решението не е валидно
            }
            count_r = 0; // ресетваме броячите за следващия цикъл
            count_c = 0;
        }
    }

// Проверка дали всички числа от 1 до 9 са въведени само веднъж във всяка 3х3 клетка
    for (int d = 1; d < 10; d++) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                for (int k = 0; k < 9; k++) {
                    if (sudokuCells[i][j][k] == d)
                        count_c++;
                }
                if (count_c > 1) { // използваме същия брояч count_c, който е ресетнат на 0 след последния цикъл по-горе
                    cout << "The number " << d << " appears " << count_c << " times in cell " << i + 1 << ", " << j + 1
                         << endl;
                    // проверката по редове и колони е достатъчна за да се валидира табицата. Няма нужда от isValid тук
                }
                count_c = 0;
            }
        }
    }

    // Извеждане на резултата от проверката
    if (isValid) {
        cout << "The solution is correct!";
    } else {
        cout << "The solution is incorrect!";
    }
    return 0;
}